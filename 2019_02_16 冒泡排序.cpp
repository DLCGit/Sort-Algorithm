
/* 冒泡排序为稳定排序: 平均、最坏时间复杂度 O( n^2 ),
 * 最好时间复杂度 O( n ), 空间复杂度 O( 1 )
 */

/* -----------------------------------------------------------  */
/* 相关接口  */
#include <stdio.h>
#include <stdlib.h>
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 相关特殊宏  */
#define MAXSIZE 6

#define swap( arr, j, i ) { \
int tmp = 0; tmp = arr[ i ]; \
arr[ i ] = arr[ j ]; arr[ j ] = tmp; }
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 全局  */
int arr[ MAXSIZE ] = { 5, 2, 6, 54, 2, 65 };
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 函数原型  */
void BeforeOrdering( int *arr, int n );            /* 排序前    */
void BubbleSort( int *arr, int n );                /* 冒泡排序  */
void AfterOrdering( int *arr, int n );             /* 排序后    */
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 主测试  */
int main( int argc, char **argv ) {
	BeforeOrdering( arr, sizeof( arr ) / sizeof( int ) );
	BubbleSort( arr, sizeof( arr ) / sizeof( int ) );
	AfterOrdering( arr, sizeof( arr ) / sizeof( int ) );
    
    system("pause");
    return 0;
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 排序前  */
void BeforeOrdering( int *arr, int n ) {
	printf( "排序前: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 冒泡排序  */
void BubbleSort( int *arr, int n ) {
	for ( int i = 0; n > i; ++i ) {
		int k = i;
		for ( int j = i + 1; n > j; ++j ) {
			if ( arr[ k ] > arr[ j ] )
				swap( arr, k, j );
			if ( !k )
				break;
		}
	}
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 排序后  */
void AfterOrdering( int *arr, int n ) {
	printf( "排序后: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* -----------------------------------------------------------  */

