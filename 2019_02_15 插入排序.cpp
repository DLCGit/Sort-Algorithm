
/* 插入排序为稳定排序: 平均、最坏时间复杂度 O( n^2 ),
 * 最好时间复杂度 O( n ), 空间复杂度 O( 1 )
 */

/* -----------------------------------------------------------  */
/* 相关接口  */
#include <stdio.h>
#include <stdlib.h>
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 相关特殊宏  */
#define MAXSIZE 10
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 全局  */
int arr[ MAXSIZE ] = { 8, 5, 2, 6, 9, 3, 1, 4, 0, 7 };
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 函数原型  */
void BeforeOrdering( int *arr, int n );            /* 排序前    */
void InsertionSort( int *arr, int n );             /* 插入排序  */
void AfterOrdering( int *arr, int n );             /* 排序后    */
/* -----------------------------------------------------------  */


/* ------------------------------------------------------------------------------------------------------------------------------------  */
/* 主测试  */
int main(int argc, char **argv)
{
    BeforeOrdering( arr, sizeof( arr ) / sizeof( int ) );
	InsertionSort( arr, sizeof( arr ) / sizeof( int ) );
	AfterOrdering( arr, sizeof( arr ) / sizeof( int ) );
    
    system("pause");
    return 0;
}
/* ------------------------------------------------------------------------------------------------------------------------------------  */


/* ------------------------------------------------------------------------------------------------------------------------------------  */
/* 排序前  */
void BeforeOrdering( int *arr, int n ) {
	printf( "排序前: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* ------------------------------------------------------------------------------------------------------------------------------------  */


/* ------------------------------------------------------------------------------------------------------------------------------------  */
/* 插入排序  */
void InsertionSort( int *arr, int n ) {
    for ( int i = 0; n > i; ++i ) {                   /* 类似抓扑克牌排序（类似二分插入）  */
        int get = arr[ i ], j = i - 1;                /* 右手拿到一张扑克牌, 拿在左手上的牌总是排序好的  */
        while ( ( 0 <= j ) && ( get < arr[ j ] ) ) {  /* 将右手拿到的扑克牌与左手拿着排序好的牌从右向左进行比较  */
            arr[ j + 1 ] = arr[ j ];                  /* 如果左手上拿着排序好的牌比右手拿到的扑克牌大, 就将扑克牌左移  */
            j--;
        }
        arr[ j + 1 ] = get;                           /* 直到左手排序好的牌比右手拿到的扑克牌小, 则拿到的扑克牌插入到排序好的扑克牌右边  */
    }
}
/* ------------------------------------------------------------------------------------------------------------------------------------  */


/* ------------------------------------------------------------------------------------------------------------------------------------  */
/* 排序后  */
void AfterOrdering( int *arr, int n ) {
	printf( "排序后: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* ------------------------------------------------------------------------------------------------------------------------------------  */

