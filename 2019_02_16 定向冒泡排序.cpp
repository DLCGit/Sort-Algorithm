
/* 定向冒泡排序为稳定排序: 平均、最坏时间复杂度 O( n^2 ),
 * 最好时间复杂度 O( n ), 空间复杂度 O( 1 )
 */
 
/* -----------------------------------------------------------  */
/* 相关接口  */
#include <stdio.h>
#include <stdlib.h>
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 相关特殊宏  */
#define MAXSIZE 10

#define swap( arr, j, i ) { \
int tmp = 0; tmp = arr[ i ]; \
arr[ i ] = arr[ j ]; arr[ j ] = tmp; }
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 全局  */
int arr[ MAXSIZE ] = { 8, 5, 2, 6, 9, 3, 1, 4, 0, 7 };
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 函数原型  */
void BeforeOrdering( int *arr, int n );        /* 排序前        */
void DirectedBubbleSort(int *arr, int n);      /* 定向冒泡排序  */
void AfterOrdering( int *arr, int n );         /* 排序后        */
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 主测试  */
int main( int argc, char **argv ) {
	BeforeOrdering( arr, sizeof( arr ) / sizeof( int ) );
    DirectedBubbleSort( arr, sizeof( arr ) / sizeof( int ) );
    AfterOrdering( arr, sizeof( arr ) / sizeof( int ) );
    
    system("pause");
    return 0;
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 排序前  */
void BeforeOrdering( int *arr, int n ) {
	printf( "排序前: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 定向冒泡排序  */
void DirectedBubbleSort( int *arr, int n ) {
    int i = 0, left  = 0, right = n - 1;
    while ( left <= right ) {
		/* 左边一半, 将最大元素放到后面  */
        for ( i = left; right > i; ++i )
            if ( arr[ i + 1 ] < arr[ i ] )
				swap( arr, i, i + 1 );
        right--;

        /* 右边一半, 将最小元素放到前面 */
        for ( i = right; left < i; --i )
            if ( arr[ i - 1 ] > arr[ i ] )
				swap( arr, i - 1, i );
        left++;
    }
}
/* -----------------------------------------------------------  */


/* -----------------------------------------------------------  */
/* 排序后  */
void AfterOrdering( int *arr, int n ) {
	printf( "排序后: " );
    for ( int i = 0; n > i; ++i )
        printf( "%d ", arr[ i ] );
    putchar( '\n' );
}
/* -----------------------------------------------------------  */

